version: '3.8'

services:
  platform-local-metastore:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: platform-local-metastore
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
    ports:
      - "${SQLSERVER_PORT}:${SQLSERVER_PORT}"
    volumes:
      - sql-data:/var/opt/mssql
    

  sql-init:
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      - platform-local-metastore
    volumes:
      - ./platform-local-metastore:/platform-local-metastore
    entrypoint: >
      /bin/bash -c "
      sleep 15 &&
      until /opt/mssql-tools/bin/sqlcmd -S platform-local-metastore -U sa -P ${SA_PASSWORD} -Q 'SELECT 1'; do
        echo 'Waiting for SQL Server to be ready...'
        sleep 5
      done &&
      /opt/mssql-tools/bin/sqlcmd -S platform-local-metastore -U sa -P ${SA_PASSWORD} -i /platform-local-metastore/init.sql"
    

  platform-quality-receiver:
    build:
      context: ./platform-quality-receiver
    container_name: platform-quality-receiver
    environment:
      - DB_URL=${DB_URL}
      - BD_REFRESH_RATE_MS=${BD_REFRESH_RATE_MS}
      - BD_CREDENTIALS_USERNAME=${BD_CREDENTIALS_USERNAME}
      - BD_CREDENTIALS_PASSWORD=${BD_CREDENTIALS_PASSWORD}
      - BD_CREDENTIALS_TENANT=${BD_CREDENTIALS_TENANT}
    ports:
      - "${QUALITY_RECEIVER_PORT}:${QUALITY_RECEIVER_PORT}"
    depends_on:
      - platform-local-metastore
      - sql-init
    entrypoint: >
      /bin/bash -c "
      sleep 15 &&
      until nc -zv platform-local-metastore 1433; do
        echo 'Waiting for SQL Server to be ready...'
        sleep 5
      done &&
      java -jar /app/platform-quality-receiver.jar"
    

  platform-collector:
    #image: otel/opentelemetry-collector-contrib:latest
    image: otel/opentelemetry-collector-contrib:0.117.0
    container_name: platform-collector
    command: ["--config=/etc/platform-collector/config.yaml"]
    volumes:
      - ./platform-collector/config.yaml:/etc/platform-collector/config.yaml
    ports:
      #- "${OTEL_GRPC_PORT}:${OTEL_GRPC_PORT}"
      - "${OTEL_HTTP_PORT}:${OTEL_HTTP_PORT}"
    depends_on:
      - platform-quality-receiver
      - platform-local-metastore
      - sql-init

  # cdp-quality-sidecar:
  #   build:
  #     context: ./cdp-quality-sidecar
  #   container_name: cdp-quality-sidecar
  #   environment:
  #     #- OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_ENDPOINT}
  #     #- OTEL_EXPORTER_OTLP_ENDPOINT=https://api-app.eni.com/sd-xops/otel-collector
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://platform-collector:4318
  #     - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
  #     - OTEL_METRIC_EXPORT_INTERVAL=${OTEL_METRIC_EXPORT_INTERVAL}
  #     - OTEL_SERVICE_NAME=${CDP_OTEL_SERVICE_NAME}
  #     - DATA_PRODUCT_NAME=${CDP_DATA_PRODUCT_NAME}
  #     - EXPECTATIONS_JSON_FILE_PATH=${EXPECTATIONS_JSON_FILE_PATH}
  #   depends_on:
  #     - platform-collector

  jupyter:
    image: jupyter/base-notebook
    container_name: quality-sidecar-jupyter-notebook
    ports:
      - "8888:8888"  
    volumes:
      - ./notebook:/home/jovyan  
    environment:
      - JUPYTER_TOKEN=password

  forwarder:
    build:
      context: ./forwarder
    container_name: forwarder
    environment:
      - ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - BLINDATA_FORWARDER_USERNAME=${BLINDATA_FORWARDER_USERNAME}
      - BLINDATA_FORWARDER_PASSWORD=${BLINDATA_FORWARDER_PASSWORD}
      - BLINDATA_TENANT_ID=${BLINDATA_TENANT_ID}
      - SCHEDULE_INTERVAL=${SCHEDULE_INTERVAL}
    ports:
      - "5000:5000"
    depends_on:
      - platform-local-metastore
      - sql-init
    entrypoint: >
      /bin/bash -c "sleep 10 && 
      until nc -zv platform-local-metastore 1433; do 
        echo 'Waiting for SQL Server to be ready...' && 
        sleep 5; 
      done && 
      echo 'SQL Server is ready, starting the service...' && 
      python3 /app/src/main.py"

volumes:
  sql-data:
    driver: local

